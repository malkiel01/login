# מערכת דשבורד מודולרית - מבנה מלא

## מבנה התיקיות המלא:
```
dashboard/
├── index.php                       # קובץ ראשי מינימלי
├── .htaccess                       # הגדרות Apache
│
├── bootstrap/                      # מערכת האתחול
│   ├── loader.php                  # מטעין ראשי
│   ├── permissions.php             # מנהל הרשאות
│   └── router.php                  # ניתוב דינמי
│
├── modules/                        # מודולים לפי סוג משתמש
│   ├── core/                       # ליבת המערכת
│   │   ├── init.php
│   │   ├── dependencies.php
│   │   ├── security.php
│   │   └── database.php
│   │
│   ├── admin/                      # מודול מנהל
│   │   ├── dashboard.php
│   │   ├── functions.php
│   │   ├── widgets.php
│   │   └── assets/ =
│   │       ├── admin.css =
│   │       └── admin.js =
│   │
│   ├── user/                       # מודול משתמש רגיל
│   │   ├── dashboard.php
│   │   ├── functions.php
│   │   ├── widgets.php =
│   │   └── assets/ =
│   │       ├── user.css =
│   │       └── user.js =
│   │
│   ├── moderator/ =                  # מודול מנהל תוכן
│   │   ├── dashboard.php =
│   │   ├── functions.php =
│   │   └── widgets.php =
│   │
│   └── guest/ =                      # מודול אורח
│       ├── limited.php =
│       └── functions.php =
│
├── config/                         # קבצי הגדרות
│   ├── permissions.json
│   ├── modules.json
│   ├── roles.json
│   └── settings.php =
│
├── api/                           # API endpoints
│   ├── index.php
│   ├── middleware.php
│   └── routes.php
│
├── assets/                        # משאבים כלליים
│   ├── css/
│   │   ├── base.css
│   │   └── dashboard.css = חסר
│   ├── js/
│   │   ├── core.js
│   │   ├── dashboard.js =
│   │   └── api-client.js =
│   └── images/  =
│
├── includes/ =                      # פונקציות עזר כלליות
│   ├── functions.php =
│   ├── helpers.php =
│   └── validators.php =
│
├── templates/                     # תבניות HTML
│   ├── layouts/
│   │   ├── header.php
│   │   ├── footer.php
│   │   └── sidebar.php =
│   └── components/ =
│       ├── widget.php =
│       ├── card.php =
│       └── table.php =
│
└── logs/ =                          # לוגים
    ├── access.log =
    ├── error.log =
    └── activity.log =
```

---

## 📄 הקבצים המלאים:

### **1. dashboard/index.php**
```php
<?php
 /**
  * Dashboard Entry Point
  * קובץ ראשי מינימלי - רק טוען את המערכת
  */

 // הפעלת דיווח שגיאות בפיתוח
 if (getenv('APP_ENV') === 'development') {
     error_reporting(E_ALL);
     ini_set('display_errors', 1);
 }

 // התחלת session
 session_start();

 // טעינת מערכת האתחול
 require_once __DIR__ . '/bootstrap/loader.php';

 // יצירת instance של הדשבורד
 $dashboard = new DashboardLoader();

 try {
     // אתחול המערכת
     $dashboard->init();
     
     // רינדור הדשבורד
     $dashboard->render();
     
 } catch (Exception $e) {
     // טיפול בשגיאות
     error_log('Dashboard Error: ' . $e->getMessage());
     
     // הפניה לדף שגיאה
     if (getenv('APP_ENV') === 'production') {
         header('Location: /error/500.php');
     } else {
         die('Error: ' . $e->getMessage());
     }
 }
?>
```

### **13. dashboard/modules/admin/dashboard.php**
```php
<?php
 /**
  * Admin Dashboard Module
  * מודול דשבורד למנהלים
  */

 class AdminDashboard {
     private $data;
     private $db;
     private $permissions;
     
     /**
      * Constructor
      */
     public function __construct($data) {
         $this->data = $data;
         $this->db = DatabaseManager::getInstance();
         $this->permissions = new PermissionManager();
     }
     
     /**
      * הצגת הדשבורד
      */
     public function display() {
         // טעינת נתונים
         $stats = $this->getStats();
         $recentUsers = $this->getRecentUsers();
         $activityLog = $this->getActivityLog();
         $systemStatus = $this->getSystemStatus();
         
         // טעינת template
         $this->render('admin-dashboard', [
             'user' => $this->data['user'],
             'stats' => $stats,
             'recentUsers' => $recentUsers,
             'activityLog' => $activityLog,
             'systemStatus' => $systemStatus,
             'permissions' => $this->data['permissions']
         ]);
     }
     
     /**
      * קבלת סטטיסטיקות
      */
     private function getStats() {
         $stats = $this->db->getDashboardStats();
         
         // הוספת סטטיסטיקות מתקדמות למנהלים
         $stats['server_load'] = sys_getloadavg()[0];
         $stats['disk_usage'] = round(disk_free_space('/') / disk_total_space('/') * 100, 2);
         $stats['memory_usage'] = round(memory_get_usage(true) / 1024 / 1024, 2);
         $stats['active_sessions'] = $this->getActiveSessions();
         
         return $stats;
     }
     
     /**
      * קבלת משתמשים אחרונים
      */
     private function getRecentUsers() {
         return $this->db->getAllUsers(10);
     }
     
     /**
      * קבלת לוג פעילות
      */
     private function getActivityLog() {
         return $this->db->getActivityLog(50);
     }
     
     /**
      * קבלת סטטוס מערכת
      */
     private function getSystemStatus() {
         return [
             'php_version' => PHP_VERSION,
             'mysql_version' => $this->db->getConnection()->getAttribute(PDO::ATTR_SERVER_VERSION),
             'server_software' => $_SERVER['SERVER_SOFTWARE'] ?? 'Unknown',
             'ssl_enabled' => !empty($_SERVER['HTTPS']),
             'timezone' => date_default_timezone_get(),
             'max_upload_size' => ini_get('upload_max_filesize'),
             'max_post_size' => ini_get('post_max_size'),
             'memory_limit' => ini_get('memory_limit')
         ];
     }
     
     /**
      * קבלת sessions פעילים
      */
     private function getActiveSessions() {
         $sessionPath = session_save_path();
         if (empty($sessionPath)) {
             $sessionPath = sys_get_temp_dir();
         }
         
         $sessions = glob($sessionPath . '/sess_*');
         return count($sessions);
     }
     
     /**
      * רינדור template
      */
     private function render($template, $data) {
         extract($data);
         
         // כותרת הדף
         $pageTitle = 'דשבורד מנהל - ' . SITE_NAME;
         
         // טעינת dependencies
         $dependencies = DependencyLoader::renderHTML('admin');
         $preloads = DependencyLoader::renderPreloads();
         $inlineCSS = DependencyLoader::renderInlineCSS('admin');
         
         // טעינת layout
         include TEMPLATES_PATH . '/layouts/header.php';
         include TEMPLATES_PATH . '/admin/' . $template . '.php';
         include TEMPLATES_PATH . '/layouts/footer.php';
     }
 }
?>
```

### **14. dashboard/modules/admin/functions.php**
```php
<?php
 /**
  * Admin Functions
  * פונקציות עזר למנהלים
  */

 class AdminFunctions {
     
     /**
      * יצירת משתמש חדש
      */
     public static function createUser($data) {
         $db = DatabaseManager::getInstance();
         $security = new SecurityManager();
         
         // ולידציה
         if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {
             throw new Exception('Missing required fields');
         }
         
         // בדיקת סיסמה
         $passwordValidation = $security->validatePassword($data['password']);
         if ($passwordValidation !== true) {
             throw new Exception(implode(', ', $passwordValidation));
         }
         
         // הצפנת סיסמה
         $hashedPassword = $security->hashPassword($data['password']);
         
         // הכנסה למסד נתונים
         $sql = "INSERT INTO users (username, email, password, name, role, created_at) 
                 VALUES (?, ?, ?, ?, ?, NOW())";
         
         $params = [
             $data['username'],
             $data['email'],
             $hashedPassword,
             $data['name'] ?? $data['username'],
             $data['role'] ?? 'user'
         ];
         
         $db->query($sql, $params);
         
         // רישום פעילות
         $db->logActivity($_SESSION['user_id'], 'create_user', [
             'new_user' => $data['username']
         ]);
         
         return $db->getConnection()->lastInsertId();
     }
     
     /**
      * עדכון משתמש
      */
     public static function updateUser($userId, $data) {
         $db = DatabaseManager::getInstance();
         $security = new SecurityManager();
         
         $updates = [];
         $params = [];
         
         // בניית שאילתת עדכון דינמית
         if (isset($data['name'])) {
             $updates[] = 'name = ?';
             $params[] = $data['name'];
         }
         
         if (isset($data['email'])) {
             $updates[] = 'email = ?';
             $params[] = $data['email'];
         }
         
         if (isset($data['role'])) {
             $updates[] = 'role = ?';
             $params[] = $data['role'];
         }
         
         if (isset($data['is_active'])) {
             $updates[] = 'is_active = ?';
             $params[] = $data['is_active'] ? 1 : 0;
         }
         
         if (isset($data['password']) && !empty($data['password'])) {
             $passwordValidation = $security->validatePassword($data['password']);
             if ($passwordValidation !== true) {
                 throw new Exception(implode(', ', $passwordValidation));
             }
             
             $updates[] = 'password = ?';
             $params[] = $security->hashPassword($data['password']);
         }
         
         if (empty($updates)) {
             return false;
         }
         
         $updates[] = 'updated_at = NOW()';
         $params[] = $userId;
         
         $sql = "UPDATE users SET " . implode(', ', $updates) . " WHERE id = ?";
         $db->query($sql, $params);
         
         // רישום פעילות
         $db->logActivity($_SESSION['user_id'], 'update_user', [
             'updated_user_id' => $userId,
             'fields' => array_keys($data)
         ]);
         
         return true;
     }
     
     /**
      * מחיקת משתמש
      */
     public static function deleteUser($userId) {
         if ($userId == $_SESSION['user_id']) {
             throw new Exception('Cannot delete your own account');
         }
         
         $db = DatabaseManager::getInstance();
         
         // שמירת מידע למטרת לוג
         $user = $db->getUserById($userId);
         
         // מחיקה
         $sql = "DELETE FROM users WHERE id = ?";
         $db->query($sql, [$userId]);
         
         // רישום פעילות
         $db->logActivity($_SESSION['user_id'], 'delete_user', [
             'deleted_user' => $user['username']
         ]);
         
         return true;
     }
     
     /**
      * ייצוא נתונים
      */
     public static function exportData($type, $format = 'csv') {
         $db = DatabaseManager::getInstance();
         
         switch ($type) {
             case 'users':
                 $data = $db->getAllUsers();
                 break;
                 
             case 'activity':
                 $data = $db->getActivityLog(1000);
                 break;
                 
             case 'stats':
                 $data = [$db->getDashboardStats()];
                 break;
                 
             default:
                 throw new Exception('Invalid export type');
         }
         
         // רישום פעילות
         $db->logActivity($_SESSION['user_id'], 'export_data', [
             'type' => $type,
             'format' => $format,
             'records' => count($data)
         ]);
         
         if ($format === 'csv') {
             return self::exportToCSV($data, $type);
         } elseif ($format === 'json') {
             return self::exportToJSON($data, $type);
         }
         
         throw new Exception('Invalid export format');
     }
     
     /**
      * ייצוא ל-CSV
      */
     private static function exportToCSV($data, $filename) {
         if (empty($data)) {
             return '';
         }
         
         $output = fopen('php://temp', 'r+');
         
         // כותרות
         fputcsv($output, array_keys($data[0]));
         
         // נתונים
         foreach ($data as $row) {
             fputcsv($output, $row);
         }
         
         rewind($output);
         $csv = stream_get_contents($output);
         fclose($output);
         
         // הגדרת headers להורדה
         header('Content-Type: text/csv; charset=utf-8');
         header('Content-Disposition: attachment; filename="' . $filename . '_' . date('Y-m-d') . '.csv"');
         
         // BOM עבור Excel
         echo "\xEF\xBB\xBF";
         echo $csv;
         
         exit;
     }
     
     /**
      * ייצוא ל-JSON
      */
     private static function exportToJSON($data, $filename) {
         $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
         
         header('Content-Type: application/json; charset=utf-8');
         header('Content-Disposition: attachment; filename="' . $filename . '_' . date('Y-m-d') . '.json"');
         
         echo $json;
         exit;
     }
     
     /**
      * ניקוי מטמון
      */
     public static function clearCache() {
         $cacheDir = CACHE_PATH;
         
         if (is_dir($cacheDir)) {
             $files = glob($cacheDir . '/*');
             foreach ($files as $file) {
                 if (is_file($file)) {
                     unlink($file);
                 }
             }
         }
         
         // רישום פעילות
         $db = DatabaseManager::getInstance();
         $db->logActivity($_SESSION['user_id'], 'clear_cache', [
             'cleared_files' => count($files ?? [])
         ]);
         
         return true;
     }
     
     /**
      * גיבוי מסד נתונים
      */
     public static function backupDatabase() {
         $db = DatabaseManager::getInstance();
         $connection = $db->getConnection();
         
         $tables = [];
         $result = $connection->query("SHOW TABLES");
         while ($row = $result->fetch(PDO::FETCH_NUM)) {
             $tables[] = $row[0];
         }
         
         $output = '';
         
         foreach ($tables as $table) {
             // מבנה הטבלה
             $result = $connection->query("SHOW CREATE TABLE `$table`");
             $row = $result->fetch(PDO::FETCH_NUM);
             $output .= "\n\n" . $row[1] . ";\n\n";
             
             // נתונים
             $result = $connection->query("SELECT * FROM `$table`");
             while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
                 $values = array_map([$connection, 'quote'], array_values($row));
                 $output .= "INSERT INTO `$table` VALUES (" . implode(',', $values) . ");\n";
             }
         }
         
         // שמירה לקובץ
         $filename = 'backup_' . date('Y-m-d_H-i-s') . '.sql';
         $filepath = LOGS_PATH . '/' . $filename;
         
         file_put_contents($filepath, $output);
         
         // רישום פעילות
         $db->logActivity($_SESSION['user_id'], 'database_backup', [
             'filename' => $filename,
             'tables' => count($tables)
         ]);
         
         return $filepath;
     }
 }
?>
```

### **15. dashboard/modules/admin/widgets.php**
```php
<?php
 /**
  * Admin Widgets
  * וידג'טים מתקדמים למנהלים
  */

 class AdminWidgets {
     
     /**
      * וידג'ט סטטיסטיקות מתקדמות
      */
     public static function renderAdvancedStats($stats) {
         ?>
         <div class="widget advanced-stats">
             <h3><i class="fas fa-chart-line"></i> סטטיסטיקות מתקדמות</h3>
             <div class="stats-grid">
                 <div class="stat-item">
                     <div class="stat-value"><?php echo number_format($stats['total_users']); ?></div>
                     <div class="stat-label">סה"כ משתמשים</div>
                     <div class="stat-change positive">+<?php echo $stats['new_users_week']; ?> השבוע</div>
                 </div>
                 <div class="stat-item">
                     <div class="stat-value"><?php echo $stats['active_sessions']; ?></div>
                     <div class="stat-label">משתמשים מחוברים</div>
                     <div class="stat-indicator online"></div>
                 </div>
                 <div class="stat-item">
                     <div class="stat-value"><?php echo $stats['server_load']; ?></div>
                     <div class="stat-label">עומס שרת</div>
                     <div class="progress-bar">
                         <div class="progress" style="width: <?php echo min($stats['server_load'] * 20, 100); ?>%"></div>
                     </div>
                 </div>
                 <div class="stat-item">
                     <div class="stat-value"><?php echo $stats['disk_usage']; ?>%</div>
                     <div class="stat-label">שימוש בדיסק</div>
                     <div class="progress-bar">
                         <div class="progress" style="width: <?php echo $stats['disk_usage']; ?>%"></div>
                     </div>
                 </div>
             </div>
         </div>
         <?php
     }
     
     /**
      * וידג'ט פעילות בזמן אמת
      */
     public static function renderRealtimeActivity($activities) {
         ?>
         <div class="widget realtime-activity">
             <h3><i class="fas fa-pulse"></i> פעילות בזמן אמת</h3>
             <div class="activity-stream" id="activityStream">
                 <?php foreach ($activities as $activity): ?>
                 <div class="activity-item" data-id="<?php echo $activity['id']; ?>">
                     <div class="activity-icon">
                         <?php echo self::getActivityIcon($activity['action']); ?>
                     </div>
                     <div class="activity-content">
                         <div class="activity-user">
                             <?php echo htmlspecialchars($activity['username']); ?>
                         </div>
                         <div class="activity-action">
                             <?php echo self::getActivityDescription($activity['action']); ?>
                         </div>
                         <div class="activity-time" data-timestamp="<?php echo strtotime($activity['created_at']); ?>">
                             <?php echo self::timeAgo($activity['created_at']); ?>
                         </div>
                     </div>
                 </div>
                 <?php endforeach; ?>
             </div>
         </div>
         <?php
     }
     
     /**
      * וידג'ט ניהול מהיר
      */
     public static function renderQuickActions() {
         ?>
         <div class="widget quick-actions">
             <h3><i class="fas fa-bolt"></i> פעולות מהירות</h3>
             <div class="actions-grid">
                 <button class="action-btn" onclick="AdminActions.createUser()">
                     <i class="fas fa-user-plus"></i>
                     <span>משתמש חדש</span>
                 </button>
                 <button class="action-btn" onclick="AdminActions.exportData()">
                     <i class="fas fa-download"></i>
                     <span>ייצוא נתונים</span>
                 </button>
                 <button class="action-btn" onclick="AdminActions.clearCache()">
                     <i class="fas fa-broom"></i>
                     <span>ניקוי מטמון</span>
                 </button>
                 <button class="action-btn" onclick="AdminActions.backup()">
                     <i class="fas fa-database"></i>
                     <span>גיבוי</span>
                 </button>
                 <button class="action-btn" onclick="AdminActions.viewLogs()">
                     <i class="fas fa-file-alt"></i>
                     <span>צפייה בלוגים</span>
                 </button>
                 <button class="action-btn" onclick="AdminActions.settings()">
                     <i class="fas fa-cog"></i>
                     <span>הגדרות</span>
                 </button>
             </div>
         </div>
         <?php
     }
     
     /**
      * וידג'ט גרף ביצועים
      */
     public static function renderPerformanceChart() {
         ?>
         <div class="widget performance-chart">
             <h3><i class="fas fa-tachometer-alt"></i> ביצועי מערכת</h3>
             <canvas id="performanceChart"></canvas>
             <script>
             // נטען ב-admin.js
             AdminCharts.initPerformanceChart();
             </script>
         </div>
         <?php
     }
     
     /**
      * קבלת אייקון לפעילות
      */
     private static function getActivityIcon($action) {
         $icons = [
             'login' => '<i class="fas fa-sign-in-alt text-success"></i>',
             'logout' => '<i class="fas fa-sign-out-alt text-warning"></i>',
             'create_user' => '<i class="fas fa-user-plus text-primary"></i>',
             'update_user' => '<i class="fas fa-user-edit text-info"></i>',
             'delete_user' => '<i class="fas fa-user-times text-danger"></i>',
             'export_data' => '<i class="fas fa-download text-secondary"></i>',
             'clear_cache' => '<i class="fas fa-broom text-warning"></i>',
             'database_backup' => '<i class="fas fa-database text-success"></i>'
         ];
         
         return $icons[$action] ?? '<i class="fas fa-circle text-muted"></i>';
     }
     
     /**
      * קבלת תיאור פעילות
      */
     private static function getActivityDescription($action) {
         $descriptions = [
             'login' => 'התחבר למערכת',
             'logout' => 'התנתק מהמערכת',
             'create_user' => 'יצר משתמש חדש',
             'update_user' => 'עדכן פרטי משתמש',
             'delete_user' => 'מחק משתמש',
             'export_data' => 'ייצא נתונים',
             'clear_cache' => 'ניקה מטמון',
             'database_backup' => 'ביצע גיבוי'
         ];
         
         return $descriptions[$action] ?? $action;
     }
     
     /**
      * חישוב זמן יחסי
      */
     private static function timeAgo($datetime) {
         $timestamp = strtotime($datetime);
         $diff = time() - $timestamp;
         
         if ($diff < 60) {
             return 'לפני רגע';
         } elseif ($diff < 3600) {
             $minutes = round($diff / 60);
             return "לפני {$minutes} דקות";
         } elseif ($diff < 86400) {
             $hours = round($diff / 3600);
             return "לפני {$hours} שעות";
         } else {
             $days = round($diff / 86400);
             return "לפני {$days} ימים";
         }
     }
 }
?>
```

### **16. dashboard/modules/user/dashboard.php**
```php
<?php
 /**
  * User Dashboard Module
  * מודול דשבורד למשתמשים רגילים
  */

 class UserDashboard {
     private $data;
     private $db;
     
     /**
      * Constructor
      */
     public function __construct($data) {
         $this->data = $data;
         $this->db = DatabaseManager::getInstance();
     }
     
     /**
      * הצגת הדשבורד
      */
     public function display() {
         // טעינת נתונים
         $profile = $this->getUserProfile();
         $stats = $this->getUserStats();
         $recentActivity = $this->getUserActivity();
         $notifications = $this->getUserNotifications();
         
         // טעינת template
         $this->render('user-dashboard', [
             'user' => $this->data['user'],
             'profile' => $profile,
             'stats' => $stats,
             'activity' => $recentActivity,
             'notifications' => $notifications
         ]);
     }
     
     /**
      * קבלת פרופיל משתמש
      */
     private function getUserProfile() {
         return $this->db->getUserById($this->data['user']['id']);
     }
     
     /**
      * קבלת סטטיסטיקות משתמש
      */
     private function getUserStats() {
         $userId = $this->data['user']['id'];
         
         return [
             'total_logins' => $this->getTotalLogins($userId),
             'last_login' => $this->data['user']['last_login'],
             'account_age' => $this->getAccountAge($userId),
             'activity_score' => $this->getActivityScore($userId)
         ];
     }
     
     /**
      * קבלת פעילות משתמש
      */
     private function getUserActivity() {
         return $this->db->getActivityLog(20, $this->data['user']['id']);
     }
     
     /**
      * קבלת התראות
      */
     private function getUserNotifications() {
         // כאן יש לממש מערכת התראות
         return [
             ['type' => 'info', 'message' => 'ברוך הבא חזרה!', 'time' => 'עכשיו'],
             ['type' => 'success', 'message' => 'הפרופיל שלך עודכן בהצלחה', 'time' => 'אתמול']
         ];
     }
     
     /**
      * חישוב סה"כ התחברויות
      */
     private function getTotalLogins($userId) {
         $sql = "SELECT COUNT(*) as count FROM activity_logs 
                 WHERE user_id = ? AND action = 'login'";
         $result = $this->db->query($sql, [$userId])->fetch();
         return $result['count'];
     }
     
     /**
      * חישוב גיל החשבון
      */
     private function getAccountAge($userId) {
         $user = $this->db->getUserById($userId);
         $created = new DateTime($user['created_at']);
         $now = new DateTime();
         $diff = $now->diff($created);
         
         if ($diff->y > 0) {
             return $diff->y . ' שנים';
         } elseif ($diff->m > 0) {
             return $diff->m . ' חודשים';
         } else {
             return $diff->d . ' ימים';
         }
     }
     
     /**
      * חישוב ציון פעילות
      */
     private function getActivityScore($userId) {
         $sql = "SELECT COUNT(*) as count FROM activity_logs 
                 WHERE user_id = ? AND created_at > DATE_SUB(NOW(), INTERVAL 30 DAY)";
         $result = $this->db->query($sql, [$userId])->fetch();
         
         $score = min(100, $result['count'] * 2);
         return $score;
     }
     
     /**
      * רינדור template
      */
     private function render($template, $data) {
         extract($data);
         
         $pageTitle = 'הדשבורד שלי - ' . SITE_NAME;
         $dependencies = DependencyLoader::renderHTML('user');
         
         include TEMPLATES_PATH . '/layouts/header.php';
         include TEMPLATES_PATH . '/user/' . $template . '.php';
         include TEMPLATES_PATH . '/layouts/footer.php';
     }
 }
?>
```

### **17. dashboard/modules/user/functions.php**
```php
<?php
 /**
  * User Functions
  * פונקציות למשתמשים רגילים
  */

 class UserFunctions {
     
     /**
      * עדכון פרופיל אישי
      */
     public static function updateProfile($userId, $data) {
         // וידוא שהמשתמש מעדכן רק את הפרופיל שלו
         if ($userId != $_SESSION['user_id']) {
             throw new Exception('Unauthorized');
         }
         
         $db = DatabaseManager::getInstance();
         $security = new SecurityManager();
         
         $updates = [];
         $params = [];
         
         // שדות מותרים לעדכון
         $allowedFields = ['name', 'email', 'phone', 'bio', 'avatar'];
         
         foreach ($allowedFields as $field) {
             if (isset($data[$field])) {
                 $updates[] = "$field = ?";
                 $params[] = $security->sanitizeInput($data[$field]);
             }
         }
         
         // עדכון סיסמה
         if (isset($data['password']) && !empty($data['password'])) {
             // בדיקת סיסמה ישנה
             if (empty($data['current_password'])) {
                 throw new Exception('Current password is required');
             }
             
             $user = $db->getUserById($userId);
             if (!$security->verifyPassword($data['current_password'], $user['password'])) {
                 throw new Exception('Current password is incorrect');
             }
             
             // ולידציה של סיסמה חדשה
             $passwordValidation = $security->validatePassword($data['password']);
             if ($passwordValidation !== true) {
                 throw new Exception(implode(', ', $passwordValidation));
             }
             
             $updates[] = 'password = ?';
             $params[] = $security->hashPassword($data['password']);
         }
         
         if (empty($updates)) {
             return false;
         }
         
         $updates[] = 'updated_at = NOW()';
         $params[] = $userId;
         
         $sql = "UPDATE users SET " . implode(', ', $updates) . " WHERE id = ?";
         $db->query($sql, $params);
         
         // רישום פעילות
         $db->logActivity($userId, 'update_profile', [
             'fields' => array_keys($data)
         ]);
         
         return true;
     }
     
     /**
      * העלאת תמונת פרופיל
      */
     public static function uploadAvatar($userId, $file) {
         if ($userId != $_SESSION['user_id']) {
             throw new Exception('Unauthorized');
         }
         
         // בדיקת קובץ
         if ($file['error'] !== UPLOAD_ERR_OK) {
             throw new Exception('Upload failed');
         }
         
         // בדיקת סוג קובץ
         $allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
         if (!in_array($file['type'], $allowedTypes)) {
             throw new Exception('Invalid file type');
         }
         
         // בדיקת גודל
         if ($file['size'] > 5 * 1024 * 1024) { // 5MB
             throw new Exception('File too large');
         }
         
         // יצירת שם קובץ ייחודי
         $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
         $filename = 'avatar_' . $userId . '_' . time() . '.' . $extension;
         $uploadPath = UPLOAD_PATH . '/avatars/' . $filename;
         
         // יצירת תיקייה אם לא קיימת
         if (!is_dir(dirname($uploadPath))) {
             mkdir(dirname($uploadPath), 0755, true);
         }
         
         // העלאת הקובץ
         if (!move_uploaded_file($file['tmp_name'], $uploadPath)) {
             throw new Exception('Failed to save file');
         }
         
         // עדכון במסד נתונים
         $db = DatabaseManager::getInstance();
         $sql = "UPDATE users SET avatar = ? WHERE id = ?";
         $db->query($sql, ['/uploads/avatars/' . $filename, $userId]);
         
         // מחיקת תמונה ישנה
         $user = $db->getUserById($userId);
         if (!empty($user['avatar']) && file_exists(DASHBOARD_PATH . $user['avatar'])) {
             unlink(DASHBOARD_PATH . $user['avatar']);
         }
         
         return '/uploads/avatars/' . $filename;
     }
     
     /**
      * קבלת היסטוריית התחברויות
      */
     public static function getLoginHistory($userId, $limit = 10) {
         if ($userId != $_SESSION['user_id']) {
             throw new Exception('Unauthorized');
         }
         
         $db = DatabaseManager::getInstance();
         
         $sql = "SELECT created_at, ip_address, user_agent, details 
                 FROM activity_logs 
                 WHERE user_id = ? AND action = 'login' 
                 ORDER BY created_at DESC 
                 LIMIT ?";
         
         $stmt = $db->query($sql, [$userId, $limit]);
         return $stmt->fetchAll();
     }
     
     /**
      * ייצוא נתונים אישיים (GDPR)
      */
     public static function exportPersonalData($userId) {
         if ($userId != $_SESSION['user_id']) {
             throw new Exception('Unauthorized');
         }
         
         $db = DatabaseManager::getInstance();
         
         // איסוף כל הנתונים
         $data = [
             'profile' => $db->getUserById($userId),
             'activity' => $db->getActivityLog(null, $userId),
             'login_history' => self::getLoginHistory($userId, 100)
         ];
         
         // הסרת נתונים רגישים
         unset($data['profile']['password']);
         
         // רישום פעילות
         $db->logActivity($userId, 'export_personal_data');
         
         // החזרת JSON
         header('Content-Type: application/json');
         header('Content-Disposition: attachment; filename="my_data_' . date('Y-m-d') . '.json"');
         
         echo json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
         exit;
     }
 }
?>
```

### **2. dashboard/bootstrap/loader.php**
```php
<?php
 /**
  * Dashboard Loader
  * מטעין ראשי של המערכת
  */

 class DashboardLoader {
     private $user = null;
     private $userType = 'guest';
     private $permissions = [];
     private $modules = [];
     private $config = [];
     
     /**
      * אתחול המערכת
      */
     public function init() {
         // 1. טעינת קבצי הליבה
         $this->loadCoreFiles();
         
         // 2. בדיקת אבטחה בסיסית
         $this->performSecurityChecks();
         
         // 3. טעינת הגדרות
         $this->loadConfiguration();
         
         // 4. אימות משתמש
         $this->authenticateUser();
         
         // 5. טעינת הרשאות
         $this->loadPermissions();
         
         // 6. טעינת מודולים
         $this->loadModules();
         
         // 7. אתחול API
         $this->initializeAPI();
         
         // 8. רישום פעילות
         $this->logActivity('dashboard_load');
     }
     
     /**
      * טעינת קבצי הליבה
      */
     private function loadCoreFiles() {
         $coreFiles = [
             __DIR__ . '/../config/settings.php',
             __DIR__ . '/../modules/core/init.php',
             __DIR__ . '/../modules/core/security.php',
             __DIR__ . '/../modules/core/database.php',
             __DIR__ . '/../modules/core/dependencies.php',
             __DIR__ . '/permissions.php',
             __DIR__ . '/router.php'
         ];
         
         foreach ($coreFiles as $file) {
             if (file_exists($file)) {
                 require_once $file;
             } else {
                 throw new Exception("Core file not found: $file");
             }
         }
     }
     
     /**
      * בדיקות אבטחה
      */
     private function performSecurityChecks() {
         $security = new SecurityManager();
         
         // בדיקת HTTPS
         if ($security->requiresHTTPS() && !$security->isHTTPS()) {
             $security->redirectToHTTPS();
         }
         
         // בדיקת CSRF
         if (!$security->validateCSRF()) {
             throw new Exception('CSRF validation failed');
         }
         
         // בדיקת Rate Limiting
         if (!$security->checkRateLimit()) {
             throw new Exception('Rate limit exceeded');
         }
     }
     
     /**
      * טעינת הגדרות
      */
     private function loadConfiguration() {
         // טעינת קובץ JSON של הגדרות
         $configFiles = [
             'permissions' => __DIR__ . '/../config/permissions.json',
             'modules' => __DIR__ . '/../config/modules.json',
             'roles' => __DIR__ . '/../config/roles.json'
         ];
         
         foreach ($configFiles as $key => $file) {
             if (file_exists($file)) {
                 $this->config[$key] = json_decode(file_get_contents($file), true);
             }
         }
     }
     
     /**
      * אימות משתמש
      */
     private function authenticateUser() {
         // בדיקה אם המשתמש מחובר
         if (!isset($_SESSION['user_id'])) {
             // הפניה לדף התחברות
             header('Location: /auth/login.php?redirect=' . urlencode($_SERVER['REQUEST_URI']));
             exit;
         }
         
         // טעינת נתוני משתמש
         $db = DatabaseManager::getInstance();
         $this->user = $db->getUserById($_SESSION['user_id']);
         
         if (!$this->user) {
             session_destroy();
             header('Location: /auth/login.php');
             exit;
         }
         
         // קביעת סוג משתמש
         $this->userType = $this->user['role'] ?? 'user';
         
         // עדכון זמן פעילות אחרון
         $db->updateLastActivity($_SESSION['user_id']);
     }
     
     /**
      * טעינת הרשאות
      */
     private function loadPermissions() {
         $permissionManager = new PermissionManager($this->config['permissions']);
         $this->permissions = $permissionManager->getPermissionsForRole($this->userType);
         
         // שמירת הרשאות ב-session
         $_SESSION['permissions'] = $this->permissions;
     }
     
     /**
      * טעינת מודולים לפי סוג משתמש
      */
     private function loadModules() {
         $modulesConfig = $this->config['modules'][$this->userType] ?? [];
         
         foreach ($modulesConfig as $moduleName) {
             $modulePath = __DIR__ . "/../modules/{$this->userType}/{$moduleName}.php";
             
             if (file_exists($modulePath)) {
                 require_once $modulePath;
                 $this->modules[] = $moduleName;
             }
         }
         
         // טעינת מודול ברירת מחדל אם לא נטענו מודולים
         if (empty($this->modules)) {
             $defaultPath = __DIR__ . "/../modules/{$this->userType}/dashboard.php";
             if (file_exists($defaultPath)) {
                 require_once $defaultPath;
                 $this->modules[] = 'dashboard';
             }
         }
     }
     
     /**
      * אתחול API
      */
     private function initializeAPI() {
         // הגדרת נתיבי API
         $_SESSION['api_base'] = '/dashboard/api/';
         $_SESSION['api_token'] = bin2hex(random_bytes(32));
     }
     
     /**
      * רישום פעילות
      */
     private function logActivity($action) {
         $db = DatabaseManager::getInstance();
         $db->logActivity($_SESSION['user_id'], $action, [
             'ip' => $_SERVER['REMOTE_ADDR'],
             'user_agent' => $_SERVER['HTTP_USER_AGENT'],
             'module' => implode(',', $this->modules)
         ]);
     }
     
     /**
      * רינדור הדשבורד
      */
     public function render() {
         // קביעת class הדשבורד לפי סוג משתמש
         $dashboardClass = ucfirst($this->userType) . 'Dashboard';
         
         if (!class_exists($dashboardClass)) {
             $dashboardClass = 'DefaultDashboard';
         }
         
         // יצירת instance ורינדור
         $dashboard = new $dashboardClass([
             'user' => $this->user,
             'permissions' => $this->permissions,
             'modules' => $this->modules,
             'config' => $this->config
         ]);
         
         $dashboard->display();
     }
 }
?>
```

### **3. dashboard/bootstrap/permissions.php**
```php
<?php
 /**
  * Permission Manager
  * מנהל הרשאות מרכזי
  */

 class PermissionManager {
     private $permissions = [];
     private $roles = [];
     private $userPermissions = [];
     
     /**
      * Constructor
      */
     public function __construct($config = []) {
         $this->permissions = $config;
         $this->loadRoles();
     }
     
     /**
      * טעינת תפקידים
      */
     private function loadRoles() {
         $rolesFile = __DIR__ . '/../config/roles.json';
         if (file_exists($rolesFile)) {
             $this->roles = json_decode(file_get_contents($rolesFile), true);
         }
     }
     
     /**
      * קבלת הרשאות לפי תפקיד
      */
     public function getPermissionsForRole($role) {
         if (!isset($this->roles[$role])) {
             return $this->getDefaultPermissions();
         }
         
         return $this->roles[$role]['permissions'] ?? [];
     }
     
     /**
      * בדיקת הרשאה
      */
     public function hasPermission($permission, $role = null) {
         if ($role === null && isset($_SESSION['user_role'])) {
             $role = $_SESSION['user_role'];
         }
         
         $permissions = $this->getPermissionsForRole($role);
         return in_array($permission, $permissions);
     }
     
     /**
      * בדיקת הרשאות מרובות
      */
     public function hasAllPermissions($permissions, $role = null) {
         foreach ($permissions as $permission) {
             if (!$this->hasPermission($permission, $role)) {
                 return false;
             }
         }
         return true;
     }
     
     /**
      * בדיקת הרשאה אחת לפחות
      */
     public function hasAnyPermission($permissions, $role = null) {
         foreach ($permissions as $permission) {
             if ($this->hasPermission($permission, $role)) {
                 return true;
             }
         }
         return false;
     }
     
     /**
      * קבלת הרשאות ברירת מחדל
      */
     private function getDefaultPermissions() {
         return [
             'view_dashboard',
             'view_profile',
             'edit_own_profile'
         ];
     }
     
     /**
      * הוספת הרשאה דינמית
      */
     public function grantPermission($userId, $permission) {
         if (!isset($this->userPermissions[$userId])) {
             $this->userPermissions[$userId] = [];
         }
         
         if (!in_array($permission, $this->userPermissions[$userId])) {
             $this->userPermissions[$userId][] = $permission;
             
             // שמירה במסד נתונים
             $db = DatabaseManager::getInstance();
             $db->grantUserPermission($userId, $permission);
         }
     }
     
     /**
      * הסרת הרשאה
      */
     public function revokePermission($userId, $permission) {
         if (isset($this->userPermissions[$userId])) {
             $key = array_search($permission, $this->userPermissions[$userId]);
             if ($key !== false) {
                 unset($this->userPermissions[$userId][$key]);
                 
                 // הסרה ממסד נתונים
                 $db = DatabaseManager::getInstance();
                 $db->revokeUserPermission($userId, $permission);
             }
         }
     }
     
     /**
      * בדיקת תפקיד
      */
     public function hasRole($role, $userId = null) {
         if ($userId === null && isset($_SESSION['user_id'])) {
             $userId = $_SESSION['user_id'];
         }
         
         $db = DatabaseManager::getInstance();
         $user = $db->getUserById($userId);
         
         return $user['role'] === $role;
     }
     
     /**
      * החלפת תפקיד
      */
     public function changeRole($userId, $newRole) {
         if (!isset($this->roles[$newRole])) {
             throw new Exception("Role '$newRole' does not exist");
         }
         
         $db = DatabaseManager::getInstance();
         $db->updateUserRole($userId, $newRole);
         
         // עדכון session אם זה המשתמש הנוכחי
         if ($userId == $_SESSION['user_id']) {
             $_SESSION['user_role'] = $newRole;
             $_SESSION['permissions'] = $this->getPermissionsForRole($newRole);
         }
     }
 }
?>
```

### **4. dashboard/bootstrap/router.php**
```php
<?php
 /**
  * Dashboard Router
  * מנהל ניתוב דינמי
  */

 class DashboardRouter {
     private $routes = [];
     private $currentRoute = null;
     private $params = [];
     
     /**
      * הוספת נתיב
      */
     public function addRoute($path, $handler, $permissions = []) {
         $this->routes[$path] = [
             'handler' => $handler,
             'permissions' => $permissions
         ];
     }
     
     /**
      * ניתוב בקשה
      */
     public function route($path = null) {
         if ($path === null) {
             $path = $_SERVER['REQUEST_URI'];
             $path = parse_url($path, PHP_URL_PATH);
             $path = str_replace('/dashboard', '', $path);
         }
         
         // חיפוש התאמה
         foreach ($this->routes as $routePath => $routeConfig) {
             if ($this->matchRoute($routePath, $path)) {
                 $this->currentRoute = $routeConfig;
                 
                 // בדיקת הרשאות
                 if (!empty($routeConfig['permissions'])) {
                     $pm = new PermissionManager();
                     if (!$pm->hasAllPermissions($routeConfig['permissions'])) {
                         $this->handleUnauthorized();
                         return;
                     }
                 }
                 
                 // הפעלת handler
                 $this->executeHandler($routeConfig['handler']);
                 return;
             }
         }
         
         // אם לא נמצא נתיב
         $this->handleNotFound();
     }
     
     /**
      * בדיקת התאמת נתיב
      */
     private function matchRoute($routePath, $requestPath) {
         // המרת נתיב לביטוי רגולרי
         $pattern = preg_replace('/\{(\w+)\}/', '(?P<$1>[^/]+)', $routePath);
         $pattern = '#^' . $pattern . '$#';
         
         if (preg_match($pattern, $requestPath, $matches)) {
             // שמירת פרמטרים
             foreach ($matches as $key => $value) {
                 if (!is_numeric($key)) {
                     $this->params[$key] = $value;
                 }
             }
             return true;
         }
         
         return false;
     }
     
     /**
      * הפעלת handler
      */
     private function executeHandler($handler) {
         if (is_callable($handler)) {
             call_user_func_array($handler, [$this->params]);
         } elseif (is_string($handler)) {
             // אם זה שם של class@method
             if (strpos($handler, '@') !== false) {
                 list($class, $method) = explode('@', $handler);
                 $instance = new $class();
                 $instance->$method($this->params);
             } else {
                 // טעינת קובץ
                 include $handler;
             }
         }
     }
     
     /**
      * טיפול בחוסר הרשאה
      */
     private function handleUnauthorized() {
         http_response_code(403);
         include __DIR__ . '/../templates/errors/403.php';
     }
     
     /**
      * טיפול בנתיב לא קיים
      */
     private function handleNotFound() {
         http_response_code(404);
         include __DIR__ . '/../templates/errors/404.php';
     }
     
     /**
      * קבלת פרמטר
      */
     public function getParam($name, $default = null) {
         return $this->params[$name] ?? $default;
     }
 }
?>
```

### **5. dashboard/modules/core/init.php**
```php
<?php
 /**
  * Core Initialization
  * אתחול מערכת הליבה
  */

 // הגדרת קבועים
 define('DASHBOARD_VERSION', '2.0.0');
 define('DASHBOARD_PATH', dirname(dirname(__DIR__)));
 define('DASHBOARD_URL', '/dashboard');
 define('MODULES_PATH', DASHBOARD_PATH . '/modules');
 define('TEMPLATES_PATH', DASHBOARD_PATH . '/templates');
 define('ASSETS_PATH', DASHBOARD_PATH . '/assets');
 define('CONFIG_PATH', DASHBOARD_PATH . '/config');
 define('LOGS_PATH', DASHBOARD_PATH . '/logs');

 // הגדרת איזור זמן
 date_default_timezone_set('Asia/Jerusalem');

 // הגדרת encoding
 mb_internal_encoding('UTF-8');

 // AutoLoader
 spl_autoload_register(function ($class) {
     $paths = [
         MODULES_PATH . '/core/',
         DASHBOARD_PATH . '/bootstrap/',
         DASHBOARD_PATH . '/includes/'
     ];
     
     foreach ($paths as $path) {
         $file = $path . $class . '.php';
         if (file_exists($file)) {
             require_once $file;
             return;
         }
     }
 });

 // Error Handler
 set_error_handler(function ($severity, $message, $file, $line) {
     if (!(error_reporting() & $severity)) {
         return false;
     }
     
     throw new ErrorException($message, 0, $severity, $file, $line);
 });

 // Exception Handler
 set_exception_handler(function ($exception) {
     error_log($exception->getMessage());
     
     if (getenv('APP_ENV') === 'development') {
         echo '<pre>';
         echo $exception;
         echo '</pre>';
     } else {
         header('Location: /error/500.php');
     }
     exit;
 });

 // Shutdown Handler
 register_shutdown_function(function () {
     $error = error_get_last();
     if ($error && ($error['type'] & (E_ERROR | E_PARSE | E_CORE_ERROR | E_COMPILE_ERROR))) {
         error_log('Fatal error: ' . $error['message'] . ' in ' . $error['file'] . ' on line ' . $error['line']);
         
         if (getenv('APP_ENV') !== 'development') {
             header('Location: /error/500.php');
         }
     }
 });

 /**
  * פונקציות עזר גלובליות
  */

 // בדיקת AJAX request
 function isAjax() {
     return !empty($_SERVER['HTTP_X_REQUESTED_WITH']) && 
            strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
 }

 // קבלת IP address
 function getClientIP() {
     $keys = ['HTTP_CF_CONNECTING_IP', 'HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'REMOTE_ADDR'];
     
     foreach ($keys as $key) {
         if (isset($_SERVER[$key])) {
             return $_SERVER[$key];
         }
     }
     
     return '0.0.0.0';
 }

 // יצירת CSRF token
 function generateCSRFToken() {
     if (!isset($_SESSION['csrf_token'])) {
         $_SESSION['csrf_token'] = bin2hex(random_bytes(32));
     }
     return $_SESSION['csrf_token'];
 }

 // בדיקת CSRF token
 function validateCSRFToken($token) {
     return isset($_SESSION['csrf_token']) && hash_equals($_SESSION['csrf_token'], $token);
 }
?>
```

### **6. dashboard/modules/core/security.php**
```php
<?php
 /**
  * Security Manager
  * מנהל אבטחה מרכזי
  */

 class SecurityManager {
     private $config = [];
     private $rateLimiter = null;
     
     /**
      * Constructor
      */
     public function __construct() {
         $this->loadConfig();
         $this->initRateLimiter();
     }
     
     /**
      * טעינת הגדרות אבטחה
      */
     private function loadConfig() {
         $configFile = CONFIG_PATH . '/security.json';
         if (file_exists($configFile)) {
             $this->config = json_decode(file_get_contents($configFile), true);
         } else {
             // הגדרות ברירת מחדל
             $this->config = [
                 'require_https' => true,
                 'csrf_enabled' => true,
                 'rate_limit' => [
                     'enabled' => true,
                     'max_requests' => 60,
                     'time_window' => 60
                 ],
                 'session' => [
                     'timeout' => 3600,
                     'regenerate' => 300
                 ],
                 'password' => [
                     'min_length' => 8,
                     'require_uppercase' => true,
                     'require_lowercase' => true,
                     'require_numbers' => true,
                     'require_special' => true
                 ]
             ];
         }
     }
     
     /**
      * אתחול Rate Limiter
      */
     private function initRateLimiter() {
         if ($this->config['rate_limit']['enabled']) {
             $this->rateLimiter = new RateLimiter(
                 $this->config['rate_limit']['max_requests'],
                 $this->config['rate_limit']['time_window']
             );
         }
     }
     
     /**
      * בדיקת HTTPS
      */
     public function requiresHTTPS() {
         return $this->config['require_https'];
     }
     
     /**
      * בדיקה אם החיבור מאובטח
      */
     public function isHTTPS() {
         return (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || 
                $_SERVER['SERVER_PORT'] == 443 ||
                (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https');
     }
     
     /**
      * הפניה ל-HTTPS
      */
     public function redirectToHTTPS() {
         if (!$this->isHTTPS()) {
             $url = 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
             header('Location: ' . $url);
             exit;
         }
     }
     
     /**
      * בדיקת CSRF
      */
     public function validateCSRF() {
         if (!$this->config['csrf_enabled']) {
             return true;
         }
         
         // לא בודקים CSRF ב-GET requests
         if ($_SERVER['REQUEST_METHOD'] === 'GET') {
             return true;
         }
         
         $token = $_POST['csrf_token'] ?? $_SERVER['HTTP_X_CSRF_TOKEN'] ?? '';
         return validateCSRFToken($token);
     }
     
     /**
      * בדיקת Rate Limiting
      */
     public function checkRateLimit() {
         if (!$this->rateLimiter) {
             return true;
         }
         
         $identifier = $_SESSION['user_id'] ?? getClientIP();
         return $this->rateLimiter->check($identifier);
     }
     
     /**
      * סניטציה של קלט
      */
     public function sanitizeInput($input, $type = 'string') {
         if (is_array($input)) {
             return array_map(function($item) use ($type) {
                 return $this->sanitizeInput($item, $type);
             }, $input);
         }
         
         switch ($type) {
             case 'email':
                 return filter_var($input, FILTER_SANITIZE_EMAIL);
                 
             case 'int':
                 return filter_var($input, FILTER_SANITIZE_NUMBER_INT);
                 
             case 'float':
                 return filter_var($input, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION);
                 
             case 'url':
                 return filter_var($input, FILTER_SANITIZE_URL);
                 
             case 'html':
                 return htmlspecialchars($input, ENT_QUOTES, 'UTF-8');
                 
             case 'sql':
                 return addslashes($input);
                 
             default:
                 return htmlspecialchars(trim($input), ENT_QUOTES, 'UTF-8');
         }
     }
     
     /**
      * ולידציה של סיסמה
      */
     public function validatePassword($password) {
         $errors = [];
         
         if (strlen($password) < $this->config['password']['min_length']) {
             $errors[] = "Password must be at least {$this->config['password']['min_length']} characters";
         }
         
         if ($this->config['password']['require_uppercase'] && !preg_match('/[A-Z]/', $password)) {
             $errors[] = "Password must contain at least one uppercase letter";
         }
         
         if ($this->config['password']['require_lowercase'] && !preg_match('/[a-z]/', $password)) {
             $errors[] = "Password must contain at least one lowercase letter";
         }
         
         if ($this->config['password']['require_numbers'] && !preg_match('/[0-9]/', $password)) {
             $errors[] = "Password must contain at least one number";
         }
         
         if ($this->config['password']['require_special'] && !preg_match('/[!@#$%^&*(),.?":{}|<>]/', $password)) {
             $errors[] = "Password must contain at least one special character";
         }
         
         return empty($errors) ? true : $errors;
     }
     
     /**
      * הצפנת נתונים
      */
     public function encrypt($data, $key = null) {
         if ($key === null) {
             $key = $_ENV['ENCRYPTION_KEY'] ?? 'default-key-change-me';
         }
         
         $iv = openssl_random_pseudo_bytes(16);
         $encrypted = openssl_encrypt($data, 'AES-256-CBC', $key, 0, $iv);
         
         return base64_encode($iv . $encrypted);
     }
     
     /**
      * פענוח נתונים
      */
     public function decrypt($data, $key = null) {
         if ($key === null) {
             $key = $_ENV['ENCRYPTION_KEY'] ?? 'default-key-change-me';
         }
         
         $data = base64_decode($data);
         $iv = substr($data, 0, 16);
         $encrypted = substr($data, 16);
         
         return openssl_decrypt($encrypted, 'AES-256-CBC', $key, 0, $iv);
     }
     
     /**
      * יצירת token אקראי
      */
     public function generateToken($length = 32) {
         return bin2hex(random_bytes($length));
     }
     
     /**
      * Hash סיסמה
      */
     public function hashPassword($password) {
         return password_hash($password, PASSWORD_DEFAULT);
     }
     
     /**
      * אימות סיסמה
      */
     public function verifyPassword($password, $hash) {
         return password_verify($password, $hash);
     }
 }

 /**
  * Rate Limiter Class
  */
 class RateLimiter {
     private $maxRequests;
     private $timeWindow;
     private $storage = [];
     
     public function __construct($maxRequests, $timeWindow) {
         $this->maxRequests = $maxRequests;
         $this->timeWindow = $timeWindow;
     }
     
     public function check($identifier) {
         $now = time();
         $key = md5($identifier);
         
         // ניקוי רשומות ישנות
         if (isset($this->storage[$key])) {
             $this->storage[$key] = array_filter($this->storage[$key], function($timestamp) use ($now) {
                 return ($now - $timestamp) < $this->timeWindow;
             });
         } else {
             $this->storage[$key] = [];
         }
         
         // בדיקת מגבלה
         if (count($this->storage[$key]) >= $this->maxRequests) {
             return false;
         }
         
         // הוספת בקשה חדשה
         $this->storage[$key][] = $now;
         return true;
     }
 }
?>
```

### **7. dashboard/modules/core/database.php**
```php
<?php
 /**
  * Database Manager
  * מנהל מסד נתונים מרכזי
  */

 class DatabaseManager {
     private static $instance = null;
     private $connection = null;
     private $config = [];
     
     /**
      * Singleton pattern
      */
     public static function getInstance() {
         if (self::$instance === null) {
             self::$instance = new self();
         }
         return self::$instance;
     }
     
     /**
      * Constructor
      */
     private function __construct() {
         $this->loadConfig();
         $this->connect();
     }
     
     /**
      * טעינת הגדרות
      */
     private function loadConfig() {
         // טעינת מקובץ config ראשי
         require_once dirname(dirname(dirname(__DIR__))) . '/config.php';
         
         $this->config = [
             'host' => DB_HOST ?? 'localhost',
             'database' => DB_NAME ?? 'dashboard',
             'username' => DB_USER ?? 'root',
             'password' => DB_PASS ?? '',
             'charset' => 'utf8mb4',
             'options' => [
                 PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                 PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                 PDO::ATTR_EMULATE_PREPARES => false
             ]
         ];
     }
     
     /**
      * התחברות למסד נתונים
      */
     private function connect() {
         try {
             $dsn = "mysql:host={$this->config['host']};dbname={$this->config['database']};charset={$this->config['charset']}";
             $this->connection = new PDO(
                 $dsn,
                 $this->config['username'],
                 $this->config['password'],
                 $this->config['options']
             );
         } catch (PDOException $e) {
             error_log('Database connection failed: ' . $e->getMessage());
             throw new Exception('Database connection failed');
         }
     }
     
     /**
      * קבלת החיבור
      */
     public function getConnection() {
         return $this->connection;
     }
     
     /**
      * הרצת שאילתה
      */
     public function query($sql, $params = []) {
         try {
             $stmt = $this->connection->prepare($sql);
             $stmt->execute($params);
             return $stmt;
         } catch (PDOException $e) {
             error_log('Query failed: ' . $e->getMessage());
             throw new Exception('Query failed');
         }
     }
     
     /**
      * קבלת משתמש לפי ID
      */
     public function getUserById($userId) {
         $sql = "SELECT * FROM users WHERE id = ?";
         $stmt = $this->query($sql, [$userId]);
         return $stmt->fetch();
     }
     
     /**
      * קבלת כל המשתמשים
      */
     public function getAllUsers($limit = null, $offset = 0) {
         $sql = "SELECT id, username, name, email, role, auth_type, is_active, 
                        last_login, created_at, updated_at 
                 FROM users 
                 ORDER BY created_at DESC";
         
         if ($limit !== null) {
             $sql .= " LIMIT ? OFFSET ?";
             $stmt = $this->query($sql, [$limit, $offset]);
         } else {
             $stmt = $this->query($sql);
         }
         
         return $stmt->fetchAll();
     }
     
     /**
      * עדכון זמן פעילות אחרון
      */
     public function updateLastActivity($userId) {
         $sql = "UPDATE users SET last_activity = NOW() WHERE id = ?";
         return $this->query($sql, [$userId]);
     }
     
     /**
      * רישום פעילות
      */
     public function logActivity($userId, $action, $details = null) {
         // בדיקה אם הטבלה קיימת, אם לא - יצירה
         $this->ensureActivityLogTable();
         
         $sql = "INSERT INTO activity_logs (user_id, action, details, ip_address, user_agent, created_at) 
                 VALUES (?, ?, ?, ?, ?, NOW())";
         
         $detailsJson = $details ? json_encode($details) : null;
         $ip = $_SERVER['REMOTE_ADDR'] ?? null;
         $userAgent = $_SERVER['HTTP_USER_AGENT'] ?? null;
         
         return $this->query($sql, [$userId, $action, $detailsJson, $ip, $userAgent]);
     }
     
     /**
      * קבלת לוג פעילות
      */
     public function getActivityLog($limit = 50, $userId = null) {
         $sql = "SELECT a.*, u.username, u.name 
                 FROM activity_logs a
                 LEFT JOIN users u ON a.user_id = u.id";
         
         $params = [];
         
         if ($userId !== null) {
             $sql .= " WHERE a.user_id = ?";
             $params[] = $userId;
         }
         
         $sql .= " ORDER BY a.created_at DESC LIMIT ?";
         $params[] = $limit;
         
         $stmt = $this->query($sql, $params);
         return $stmt->fetchAll();
     }
     
     /**
      * קבלת סטטיסטיקות
      */
     public function getDashboardStats() {
         $stats = [];
         
         // סה"כ משתמשים
         $sql = "SELECT COUNT(*) as count FROM users";
         $result = $this->query($sql)->fetch();
         $stats['total_users'] = $result['count'];
         
         // משתמשים פעילים
         $sql = "SELECT COUNT(*) as count FROM users WHERE is_active = 1";
         $result = $this->query($sql)->fetch();
         $stats['active_users'] = $result['count'];
         
         // משתמשים לפי סוג
         $sql = "SELECT auth_type, COUNT(*) as count FROM users GROUP BY auth_type";
         $result = $this->query($sql)->fetchAll();
         foreach ($result as $row) {
             $stats['users_by_' . $row['auth_type']] = $row['count'];
         }
         
         // התחברויות היום
         $sql = "SELECT COUNT(*) as count FROM users WHERE DATE(last_login) = CURDATE()";
         $result = $this->query($sql)->fetch();
         $stats['today_logins'] = $result['count'];
         
         // משתמשים חדשים השבוע
         $sql = "SELECT COUNT(*) as count FROM users 
                 WHERE created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)";
         $result = $this->query($sql)->fetch();
         $stats['new_users_week'] = $result['count'];
         
         return $stats;
     }
     
     /**
      * עדכון תפקיד משתמש
      */
     public function updateUserRole($userId, $role) {
         $sql = "UPDATE users SET role = ?, updated_at = NOW() WHERE id = ?";
         return $this->query($sql, [$role, $userId]);
     }
     
     /**
      * הענקת הרשאה למשתמש
      */
     public function grantUserPermission($userId, $permission) {
         $this->ensurePermissionsTable();
         
         $sql = "INSERT INTO user_permissions (user_id, permission, granted_at) 
                 VALUES (?, ?, NOW())
                 ON DUPLICATE KEY UPDATE granted_at = NOW()";
         
         return $this->query($sql, [$userId, $permission]);
     }
     
     /**
      * הסרת הרשאה ממשתמש
      */
     public function revokeUserPermission($userId, $permission) {
         $sql = "DELETE FROM user_permissions WHERE user_id = ? AND permission = ?";
         return $this->query($sql, [$userId, $permission]);
     }
     
     /**
      * וידוא קיום טבלת activity_logs
      */
     private function ensureActivityLogTable() {
         $sql = "CREATE TABLE IF NOT EXISTS activity_logs (
             id INT AUTO_INCREMENT PRIMARY KEY,
             user_id INT NOT NULL,
             action VARCHAR(255) NOT NULL,
             details JSON,
             ip_address VARCHAR(45),
             user_agent TEXT,
             created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             INDEX idx_user_id (user_id),
             INDEX idx_created_at (created_at),
             INDEX idx_action (action)
         ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
         
         $this->query($sql);
     }
     
     /**
      * וידוא קיום טבלת הרשאות
      */
     private function ensurePermissionsTable() {
         $sql = "CREATE TABLE IF NOT EXISTS user_permissions (
             id INT AUTO_INCREMENT PRIMARY KEY,
             user_id INT NOT NULL,
             permission VARCHAR(100) NOT NULL,
             granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             granted_by INT,
             expires_at TIMESTAMP NULL,
             UNIQUE KEY unique_user_permission (user_id, permission),
             INDEX idx_user_id (user_id),
             INDEX idx_permission (permission)
         ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci";
         
         $this->query($sql);
     }
     
     /**
      * עסקת מסד נתונים
      */
     public function beginTransaction() {
         return $this->connection->beginTransaction();
     }
     
     public function commit() {
         return $this->connection->commit();
     }
     
     public function rollback() {
         return $this->connection->rollback();
     }
 }
?>
```

### **8. dashboard/modules/core/dependencies.php**
```php
<?php
 /**
  * Dependencies Manager
  * מנהל תלויות וטעינת משאבים
  */

 class DependencyLoader {
     private static $dependencies = [
         'global' => [
             'css' => [
                 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',
                 '/dashboard/assets/css/base.css',
                 '/dashboard/assets/css/dashboard.css'
             ],
             'js' => [
                 '/dashboard/assets/js/core.js',
                 '/dashboard/assets/js/dashboard.js'
             ]
         ],
         'admin' => [
             'css' => [
                 '/dashboard/modules/admin/assets/admin.css'
             ],
             'js' => [
                 '/dashboard/modules/admin/assets/admin.js',
                 '/dashboard/assets/js/api-client.js'
             ]
         ],
         'user' => [
             'css' => [
                 '/dashboard/modules/user/assets/user.css'
             ],
             'js' => [
                 '/dashboard/modules/user/assets/user.js'
             ]
         ],
         'moderator' => [
             'css' => [
                 '/dashboard/modules/moderator/assets/moderator.css'
             ],
             'js' => [
                 '/dashboard/modules/moderator/assets/moderator.js'
             ]
         ],
         'guest' => [
             'css' => [],
             'js' => []
         ]
     ];
     
     private static $cdnFallbacks = [
         'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css' => 
             '/assets/vendor/font-awesome/css/all.min.css'
     ];
     
     /**
      * טעינת dependencies לפי סוג משתמש
      */
     public static function loadForUser($userType) {
         $deps = self::$dependencies['global'];
         
         if (isset(self::$dependencies[$userType])) {
             $deps['css'] = array_merge($deps['css'], self::$dependencies[$userType]['css']);
             $deps['js'] = array_merge($deps['js'], self::$dependencies[$userType]['js']);
         }
         
         return $deps;
     }
     
     /**
      * יצירת HTML tags
      */
     public static function renderHTML($userType) {
         $deps = self::loadForUser($userType);
         $html = '';
         
         // CSS
         foreach ($deps['css'] as $css) {
             $html .= self::renderCSS($css) . "\n";
         }
         
         // JavaScript
         foreach ($deps['js'] as $js) {
             $html .= self::renderJS($js) . "\n";
         }
         
         return $html;
     }
     
     /**
      * רינדור CSS
      */
     private static function renderCSS($href) {
         // בדיקה אם יש fallback
         $fallback = '';
         if (isset(self::$cdnFallbacks[$href])) {
             $fallback = ' onerror="this.onerror=null;this.href=\'' . self::$cdnFallbacks[$href] . '\'"';
         }
         
         return '<link rel="stylesheet" href="' . $href . '"' . $fallback . '>';
     }
     
     /**
      * רינדור JavaScript
      */
     private static function renderJS($src) {
         // הוספת async/defer לקבצים לא קריטיים
         $loading = '';
         if (strpos($src, 'core') === false) {
             $loading = ' defer';
         }
         
         return '<script src="' . $src . '"' . $loading . '></script>';
     }
     
     /**
      * טעינת CSS inline
      */
     public static function renderInlineCSS($userType) {
         $criticalCSS = "
         /* Critical CSS for above-the-fold content */
         * { margin: 0; padding: 0; box-sizing: border-box; }
         body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; }
         .dashboard-container { min-height: 100vh; background: #f3f4f6; }
         .loading { display: flex; justify-content: center; align-items: center; height: 100vh; }
         ";
         
         return '<style>' . $criticalCSS . '</style>';
     }
     
     /**
      * Preload משאבים קריטיים
      */
     public static function renderPreloads() {
         $preloads = [
             '/dashboard/assets/css/dashboard.css' => 'style',
             '/dashboard/assets/js/core.js' => 'script',
             '/dashboard/assets/fonts/main.woff2' => 'font'
         ];
         
         $html = '';
         foreach ($preloads as $href => $as) {
             $type = $as === 'font' ? ' type="font/woff2" crossorigin' : '';
             $html .= '<link rel="preload" href="' . $href . '" as="' . $as . '"' . $type . '>' . "\n";
         }
         
         return $html;
     }
     
     /**
      * הוספת dependency דינמית
      */
     public static function add($userType, $type, $path) {
         if (!isset(self::$dependencies[$userType])) {
             self::$dependencies[$userType] = ['css' => [], 'js' => []];
         }
         
         if (!in_array($path, self::$dependencies[$userType][$type])) {
             self::$dependencies[$userType][$type][] = $path;
         }
     }
     
     /**
      * הסרת dependency
      */
     public static function remove($userType, $type, $path) {
         if (isset(self::$dependencies[$userType][$type])) {
             $key = array_search($path, self::$dependencies[$userType][$type]);
             if ($key !== false) {
                 unset(self::$dependencies[$userType][$type][$key]);
             }
         }
     }
     
     /**
      * ניקוי cache
      */
     public static function bustCache($path) {
         $version = DASHBOARD_VERSION;
         $separator = strpos($path, '?') !== false ? '&' : '?';
         return $path . $separator . 'v=' . $version;
     }
 }
?>
```

### **9. dashboard/config/permissions.json**
```json
{
  "permissions": {
    "dashboard": {
      "view_dashboard": "צפייה בדשבורד",
      "view_statistics": "צפייה בסטטיסטיקות",
      "export_data": "ייצוא נתונים"
    },
    "users": {
      "view_users": "צפייה במשתמשים",
      "create_user": "יצירת משתמש",
      "edit_user": "עריכת משתמש",
      "delete_user": "מחיקת משתמש",
      "change_role": "שינוי תפקיד"
    },
    "content": {
      "view_content": "צפייה בתוכן",
      "create_content": "יצירת תוכן",
      "edit_content": "עריכת תוכן",
      "delete_content": "מחיקת תוכן",
      "publish_content": "פרסום תוכן"
    },
    "system": {
      "view_logs": "צפייה בלוגים",
      "clear_cache": "ניקוי מטמון",
      "system_settings": "הגדרות מערכת",
      "backup_restore": "גיבוי ושחזור"
    }
  }
}
```

### **10. dashboard/config/roles.json**
```json
{
  "admin": {
    "name": "מנהל מערכת",
    "description": "גישה מלאה לכל המערכת",
    "permissions": [
      "view_dashboard",
      "view_statistics",
      "export_data",
      "view_users",
      "create_user",
      "edit_user",
      "delete_user",
      "change_role",
      "view_content",
      "create_content",
      "edit_content",
      "delete_content",
      "publish_content",
      "view_logs",
      "clear_cache",
      "system_settings",
      "backup_restore"
    ],
    "theme": "admin",
    "modules": ["dashboard", "users", "content", "analytics", "settings", "system"]
  },
  "moderator": {
    "name": "מנהל תוכן",
    "description": "ניהול תוכן ומשתמשים",
    "permissions": [
      "view_dashboard",
      "view_statistics",
      "view_users",
      "edit_user",
      "view_content",
      "create_content",
      "edit_content",
      "delete_content",
      "publish_content",
      "view_logs"
    ],
    "theme": "moderator",
    "modules": ["dashboard", "users", "content", "analytics"]
  },
  "user": {
    "name": "משתמש רגיל",
    "description": "גישה בסיסית",
    "permissions": [
      "view_dashboard",
      "view_statistics",
      "view_content",
      "create_content",
      "edit_own_content"
    ],
    "theme": "user",
    "modules": ["dashboard", "profile", "content"]
  },
  "guest": {
    "name": "אורח",
    "description": "גישה מוגבלת",
    "permissions": [
      "view_dashboard",
      "view_content"
    ],
    "theme": "guest",
    "modules": ["limited"]
  }
}
```

### **11. dashboard/config/modules.json**
```json
{
  "admin": [
    "dashboard",
    "functions",
    "widgets"
  ],
  "moderator": [
    "dashboard",
    "functions",
    "widgets"
  ],
  "user": [
    "dashboard",
    "functions",
    "widgets"
  ],
  "guest": [
    "limited"
  ]
}
```

### **12. dashboard/config/settings.php**
```php
<?php
/**
 * Dashboard Settings
 * הגדרות כלליות של הדשבורד
 */

// הגדרות כלליות
define('SITE_NAME', 'מערכת ניהול');
define('SITE_URL', 'https://' . $_SERVER['HTTP_HOST']);
define('ADMIN_EMAIL', 'admin@example.com');

// הגדרות מסד נתונים - טוען מקובץ config ראשי אם קיים
$configFile = dirname(dirname(dirname(__DIR__))) . '/config.php';
if (file_exists($configFile)) {
    require_once $configFile;
} else {
    // ברירת מחדל
    define('DB_HOST', 'localhost');
    define('DB_NAME', 'dashboard');
    define('DB_USER', 'root');
    define('DB_PASS', '');
}

// הגדרות סביבה
$_ENV['APP_ENV'] = getenv('APP_ENV') ?: 'production';
$_ENV['APP_DEBUG'] = getenv('APP_DEBUG') ?: false;
$_ENV['ENCRYPTION_KEY'] = getenv('ENCRYPTION_KEY') ?: 'change-this-key-in-production';

// הגדרות session
ini_set('session.cookie_httponly', 1);
ini_set('session.cookie_secure', 1