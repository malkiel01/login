<?php
/**
 * סקריפט לתיקון אוטומטי של אחידות הטפסים
 * מיקום: /dashboard/dashboards/cemeteries/forms/fix-forms-uniformity.php
 * 
 * @author Assistant
 * @version 1.0.0
 */

class FormUniformityFixer {
    
    private $formsPath;
    private $backupPath;
    private $dryRun;
    private $fixedCount = 0;
    private $errors = [];
    private $log = [];
    
    // רשימת קבצי הטפסים לתיקון
    private $formFiles = [
        'country-form.php',
        'city-form.php',
        'customer-form.php',
        'payment-form.php',
        'purchase-form.php',
        'burial-form.php',
        'residency-form.php',
        // הוסף קבצים נוספים כאן
    ];
    
    public function __construct($dryRun = true) {
        $this->formsPath = __DIR__;
        $this->backupPath = __DIR__ . '/backup_' . date('Y-m-d_His');
        $this->dryRun = $dryRun;
    }
    
    /**
     * הרצת התיקון
     */
    public function run() {
        $this->log("🚀 מתחיל תיקון אחידות טפסים");
        $this->log("📁 נתיב: " . $this->formsPath);
        $this->log("🔧 מצב: " . ($this->dryRun ? "בדיקה בלבד (Dry Run)" : "ביצוע תיקונים"));
        $this->log(str_repeat("-", 60));
        
        // יצירת גיבוי אם לא במצב dry run
        if (!$this->dryRun) {
            $this->createBackup();
        }
        
        // עבור על כל קבצי הטפסים
        foreach ($this->formFiles as $file) {
            $this->processFormFile($file);
        }
        
        // סיכום
        $this->printSummary();
    }
    
    /**
     * עיבוד קובץ טופס בודד
     */
    private function processFormFile($filename) {
        $filepath = $this->formsPath . '/' . $filename;
        
        if (!file_exists($filepath)) {
            $this->log("⚠️  קובץ לא נמצא: $filename");
            return;
        }
        
        $this->log("\n📄 מעבד: $filename");
        
        // קריאת הקובץ
        $content = file_get_contents($filepath);
        $originalContent = $content;
        
        // ביצוע תיקונים
        $content = $this->fixHeaders($content, $filename);
        $content = $this->fixParameterHandling($content, $filename);
        $content = $this->fixErrorHandling($content, $filename);
        $content = $this->fixRequirePaths($content, $filename);
        $content = $this->fixHiddenFields($content, $filename);
        $content = $this->fixModalRendering($content, $filename);
        
        // בדיקה אם בוצעו שינויים
        if ($content !== $originalContent) {
            $this->fixedCount++;
            $this->log("   ✅ נמצאו ובוצעו תיקונים");
            
            // שמירה אם לא במצב dry run
            if (!$this->dryRun) {
                file_put_contents($filepath, $content);
                $this->log("   💾 הקובץ עודכן");
            }
        } else {
            $this->log("   ✓ הקובץ כבר תקין");
        }
    }
    
    /**
     * תיקון Headers
     */
    private function fixHeaders($content, $filename) {
        // הוסף headers סטנדרטיים אם חסרים
        $standardHeaders = "<?php\n";
        $standardHeaders .= "// " . str_repeat("=", 60) . "\n";
        $standardHeaders .= "// $filename - טופס אחיד ומתוקן\n";
        $standardHeaders .= "// Generated by FormUniformityFixer v1.0\n";
        $standardHeaders .= "// " . str_repeat("=", 60) . "\n\n";
        $standardHeaders .= "// === הגדרות סטנדרטיות ===\n";
        $standardHeaders .= "error_reporting(E_ALL);\n";
        $standardHeaders .= "ini_set('display_errors', 1);\n";
        $standardHeaders .= "header('Content-Type: text/html; charset=utf-8');\n\n";
        
        // בדוק אם יש כבר headers
        if (strpos($content, "error_reporting") === false) {
            $content = str_replace("<?php", $standardHeaders, $content);
            $this->log("   + הוספת Headers סטנדרטיים");
        }
        
        return $content;
    }
    
    /**
     * תיקון קבלת פרמטרים
     */
    private function fixParameterHandling($content, $filename) {
        // החלף את כל הווריאציות בקוד אחיד
        $oldPatterns = [
            '/\$itemId\s*=\s*\$_GET\[\'itemId\'\]\s*\?\?\s*\$_GET\[\'id\'\]\s*\?\?\s*null;/',
            '/\$itemId\s*=\s*\$_GET\[\'itemId\'\]\s*\?\?\s*null;/',
            '/\$itemId\s*=\s*\$_GET\[\'id\'\]\s*\?\?\s*null;/',
        ];
        
        $newCode = "\n// === קבלת פרמטרים אחידה ===\n";
        $newCode .= "\$itemId = \$_GET['itemId'] ?? \$_GET['id'] ?? null;\n";
        $newCode .= "\$parentId = \$_GET['parentId'] ?? \$_GET['parent_id'] ?? null;\n";
        $newCode .= "\$formType = basename(__FILE__, '.php'); // מזהה אוטומטי של סוג הטופס\n";
        
        $replaced = false;
        foreach ($oldPatterns as $pattern) {
            if (preg_match($pattern, $content)) {
                $content = preg_replace($pattern, $newCode, $content, 1);
                $replaced = true;
                break;
            }
        }
        
        if ($replaced) {
            $this->log("   + תוקן טיפול בפרמטרים");
        }
        
        return $content;
    }
    
    /**
     * תיקון טיפול בשגיאות
     */
    private function fixErrorHandling($content, $filename) {
        // החלף die עם JSON בפונקציה אחידה
        $pattern = '/die\s*\(\s*json_encode\s*\(\s*\[\'error\'\s*=>\s*\$e->getMessage\(\)\]\s*\)\s*\);/';
        $replacement = 'FormUtils::handleError($e);';
        
        if (preg_match($pattern, $content)) {
            $content = preg_replace($pattern, $replacement, $content);
            $this->log("   + תוקן טיפול בשגיאות");
        }
        
        return $content;
    }
    
    /**
     * תיקון נתיבי require
     */
    private function fixRequirePaths($content, $filename) {
        // תקן את כל ה-require_once לנתיב אחיד
        $patterns = [
            '/require_once\s+dirname\(__DIR__\)\s*\.\s*[\'"]\/config\.php[\'"]\s*;/',
            '/require_once\s+\$_SERVER\[\'DOCUMENT_ROOT\'\]\s*\.\s*[\'"].*config\.php[\'"]\s*;/',
        ];
        
        $replacement = "require_once dirname(__DIR__) . '/config.php';";
        
        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $content)) {
                $content = preg_replace($pattern, $replacement, $content);
                $this->log("   + תוקנו נתיבי require");
                break;
            }
        }
        
        return $content;
    }
    
    /**
     * תיקון שדות מוסתרים
     */
    private function fixHiddenFields($content, $filename) {
        // וודא שיש שדה unicId מוסתר בעריכה
        $pattern = '/if\s*\(\$itemId\)\s*\{/';
        
        if (preg_match($pattern, $content) && 
            strpos($content, "addField('unicId'") === false) {
            
            $hiddenFieldCode = "\n// הוסף שדה מזהה מוסתר בעריכה\n";
            $hiddenFieldCode .= "if (\$itemId && isset(\$data['unicId'])) {\n";
            $hiddenFieldCode .= "    \$formBuilder->addField('unicId', '', 'hidden', [\n";
            $hiddenFieldCode .= "        'value' => \$data['unicId']\n";
            $hiddenFieldCode .= "    ]);\n";
            $hiddenFieldCode .= "}\n";
            
            // הוסף לפני renderModal
            $content = str_replace(
                "echo \$formBuilder->renderModal();",
                $hiddenFieldCode . "\necho \$formBuilder->renderModal();",
                $content
            );
            
            $this->log("   + נוסף שדה unicId מוסתר");
        }
        
        return $content;
    }
    
    /**
     * תיקון רינדור מודל
     */
    private function fixModalRendering($content, $filename) {
        // וודא שכולם משתמשים ב-renderModal פשוט
        $pattern = '/echo\s+\$formBuilder->render\(\);/';
        if (preg_match($pattern, $content)) {
            $content = preg_replace($pattern, 'echo $formBuilder->renderModal();', $content);
            $this->log("   + תוקן רינדור המודל");
        }
        
        return $content;
    }
    
    /**
     * יצירת גיבוי
     */
    private function createBackup() {
        $this->log("\n📦 יוצר גיבוי...");
        
        if (!is_dir($this->backupPath)) {
            mkdir($this->backupPath, 0755, true);
        }
        
        foreach ($this->formFiles as $file) {
            $source = $this->formsPath . '/' . $file;
            $dest = $this->backupPath . '/' . $file;
            
            if (file_exists($source)) {
                copy($source, $dest);
            }
        }
        
        $this->log("✅ גיבוי נוצר ב: " . $this->backupPath);
    }
    
    /**
     * הדפסת סיכום
     */
    private function printSummary() {
        $this->log("\n" . str_repeat("=", 60));
        $this->log("📊 סיכום:");
        $this->log("   • קבצים שנבדקו: " . count($this->formFiles));
        $this->log("   • קבצים שתוקנו: " . $this->fixedCount);
        
        if (count($this->errors) > 0) {
            $this->log("   • שגיאות: " . count($this->errors));
            foreach ($this->errors as $error) {
                $this->log("     ❌ " . $error);
            }
        }
        
        if ($this->dryRun) {
            $this->log("\n⚠️  זו הייתה הרצת בדיקה בלבד.");
            $this->log("   להרצה אמיתית, הרץ עם פרמטר: fix");
        } else {
            $this->log("\n✅ כל התיקונים בוצעו בהצלחה!");
        }
        
        $this->log(str_repeat("=", 60));
    }
    
    /**
     * רישום הודעה
     */
    private function log($message) {
        echo $message . "\n";
        $this->log[] = $message;
    }
}

// === נקודת כניסה ===

// בדוק אם מריצים מהטרמינל
if (php_sapi_name() !== 'cli') {
    die("⚠️ הסקריפט חייב לרוץ מהטרמינל בלבד!\n");
}

// בדוק פרמטרים
$action = $argv[1] ?? 'check';

if ($action === 'fix') {
    echo "\n🔧 מתחיל תיקון אמיתי...\n\n";
    $fixer = new FormUniformityFixer(false);
} else {
    echo "\n🔍 מריץ בדיקה בלבד (Dry Run)...\n\n";
    $fixer = new FormUniformityFixer(true);
}

$fixer->run();

?>